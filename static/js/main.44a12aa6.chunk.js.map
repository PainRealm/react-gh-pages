{"version":3,"sources":["Containers/App.css","Components/Persons/Person/Person.css","Components/Persons/Person/Person.js","ErrorBoundary/ErrorBoundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","App","red","bold","Red","Person","person","props","Math","random","react_default","a","createElement","className","classes","onClick","click","name","age","children","type","onChange","changed","value","ErrorBoundary","state","hasError","errorMessage","componentDidCatch","error","info","_this","setState","this","Component","persons","id","showPersons","nameChangedHandler","event","personIndex","findIndex","p","Object","objectSpread","target","toConsumableArray","deleteNameHandler","splice","togglePersonsHandler","doesShow","_this2","btnClass","map","index","src_ErrorBoundary_ErrorBoundary","key","Person_Person","assignedClasses","length","push","join","Boolean","window","location","hostname","match","ReactDOM","render","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44a12aa6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App___2wozK\",\"red\":\"red___2kpo_\",\"bold\":\"bold___1uZYR\",\"Red\":\"Red___3fZ-6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person___8LWBP\"};","import React from 'react';\r\nimport classes from './Person.css';\r\n\r\nconst person = (props) => {\r\n    const rnd = Math.random();\r\n    if (rnd>0.7){\r\n        //throw new error('Something went wrong!');\r\n    }\r\n    return(\r\n    <div className={classes.Person}>\r\n    <p onClick={props.click}>I'm {props.name} and i'm {props.age}</p>\r\n    <p>{props.children}</p>\r\n    <input type=\"text\" onChange={props.changed} value={props.name}/>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default person;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        hasError: false,\r\n        errorMessage: ''\r\n    }\r\n\r\n    componentDidCatch = (error, info) => {\r\n        this.setState({hasError: true, errorMessage: error});\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>{this.state.errorMessage}</h1>;\r\n        } else {\r\n            return this.props.children;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport classes from './App.css';\nimport Person from '../Components/Persons/Person/Person';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\n\nclass App extends Component {\n  \n  state = {\n    persons: [\n      {id: 'ldjf', name: 'Amina' , age: 26},\n      {id: 'lksjd', name: 'Amina' , age: 27}\n    ],\n    showPersons: false\n  }\n\n  nameChangedHandler = (event, id) =>{\n    const personIndex = this.state.persons.findIndex(p =>{\n      return p.id === id;\n    });\n\n    const person = {...this.state.persons[personIndex]}\n\n    person.name = event.target.value;\n    const persons = [...this.state.persons]\n    persons[personIndex] = person;\n\n    this.setState({\n      persons: persons\n    }\n    )\n  }\n\n  deleteNameHandler = (personIndex) =>{\n    //const persons = this.state.persons.slice();\n    const persons = [...this.state.persons];\n    persons.splice(personIndex, 1);\n    this.setState({persons: persons});\n  }\n\n  togglePersonsHandler = ()=>{\n    const doesShow = this.state.showPersons;\n    this.setState({showPersons: !doesShow});\n  }\n\n  render() {\n    \n    let persons = null;\n    let btnClass= \" \";\n\n    if (this.state.showPersons) {\n      persons = (\n          <div>\n          {this.state.persons.map((person, index) =>{\n            return <ErrorBoundary key= {person.id}>\n              <Person\n            click= {()=>this.deleteNameHandler(index)}\n            name={person.name}\n            age= {person.age}\n            changed= {(event)=>this.nameChangedHandler(event, person.id)}\n            /></ErrorBoundary>\n          })}\n        </div>\n        );\n        btnClass = classes.Red;\n    } \n    \n    const assignedClasses= [];\n    if(this.state.persons.length <= 2){\n      assignedClasses.push(classes.red);\n    }\n    if(this.state.persons.length <= 1){\n      assignedClasses.push(classes.bold);\n    }\n    return (\n      <div className={classes.App}>\n        <h1>Hii!</h1>\n        <p className={assignedClasses.join(' ')}>This is working!</p>\n        <button\n        className = {btnClass}\n        onClick={this.togglePersonsHandler}>Toggle Persons</button>\n        {persons}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}